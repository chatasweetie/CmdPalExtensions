<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <RootNamespace>CmdPalCatPetExtension</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>

    <WindowsSdkPackageVersion>10.0.22621.57</WindowsSdkPackageVersion>
    <TargetFramework>net9.0-windows10.0.22621.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.19041.0</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion>10.0.19041.0</SupportedOSPlatformVersion>
    <RuntimeIdentifiers>win-x64;win-arm64</RuntimeIdentifiers>

    <PublishProfile>win-$(Platform).pubxml</PublishProfile>
    <EnableMsixTooling>true</EnableMsixTooling>
    <Nullable>enable</Nullable>
    
    <AppxPackageIdentityName>JessicaDeneEarley-Cha.CmdPalCatPetExtension</AppxPackageIdentityName>
    <AppxPackagePublisher>CN=16D1F4AB-86B4-4DA3-A0CA-3FD2DBB38A19</AppxPackagePublisher>
    <AppxPackageVersion>0.0.4.0</AppxPackageVersion>
  </PropertyGroup>
  <ItemGroup>
    <Content Include="Assets\**\*.png" />
  </ItemGroup>

  <ItemGroup>
    <Manifest Include="$(ApplicationManifest)" />
  </ItemGroup>

  <!--
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.CommandPalette.Extensions" />
    <PackageReference Include="Microsoft.Windows.CsWinRT" />
    <PackageReference Include="Microsoft.WindowsAppSDK" />
    <PackageReference Include="Microsoft.Web.WebView2" />
    <PackageReference Include="System.Text.Json" />
    <PackageReference Include="Shmuelie.WinRTServer" />
  </ItemGroup>

  <!--
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution
    Explorer "Package and Publish" context menu entry to be enabled for this project even if
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>

  <PropertyGroup>
    <PublishSingleFile>true</PublishSingleFile>
    <IsAotCompatible>true</IsAotCompatible>

    <CsWinRTAotOptimizerEnabled>true</CsWinRTAotOptimizerEnabled>
    <CsWinRTAotWarningLevel>2</CsWinRTAotWarningLevel>
    <!-- Suppress DynamicallyAccessedMemberTypes.PublicParameterlessConstructor in fallback code path of Windows SDK projection -->
    <WarningsNotAsErrors>IL2081;IL2104;$(WarningsNotAsErrors)</WarningsNotAsErrors>

    <!-- When publishing trimmed, make sure to treat trimming warnings as build errors -->
    <ILLinkTreatWarningsAsErrors>true</ILLinkTreatWarningsAsErrors>

  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <!-- In Debug builds, trimming is disabled by default, but all the trim & 
         AOT warnings are enabled. This gives debug builds a tighter inner loop,
         while at least warning about future trim violations -->
    <PublishTrimmed>false</PublishTrimmed>
    
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    <EnableSingleFileAnalyzer>true</EnableSingleFileAnalyzer>
    <EnableAotAnalyzer>true</EnableAotAnalyzer>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'!='Debug'">
    <!-- In Release builds, trimming is enabled by default. 
         feel free to disable this if needed -->
    <PublishTrimmed>true</PublishTrimmed>
  </PropertyGroup>

  <ItemGroup>
    <None Include="*.installer.yaml" />
    <None Include="*.locale.*.yaml" />
  </ItemGroup>

  <Target Name="PrepareAssets" BeforeTargets="BeforeBuild">
    <!-- Copy scale-specific assets to base filenames expected by store validations -->
    <Copy SourceFiles="$(MSBuildProjectDirectory)\Assets\Square150x150Logo.scale-200.png"
          DestinationFiles="$(MSBuildProjectDirectory)\Assets\Square150x150Logo.png"
          SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\Assets\Square44x44Logo.scale-200.png"
          DestinationFiles="$(MSBuildProjectDirectory)\Assets\SmallTile.png"
          SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\Assets\Wide310x150Logo.scale-200.png"
          DestinationFiles="$(MSBuildProjectDirectory)\Assets\Wide310x150Logo.png"
          SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\Assets\SplashScreen.scale-200.png"
          DestinationFiles="$(MSBuildProjectDirectory)\Assets\SplashScreen.png"
          SkipUnchangedFiles="true" />
    <Copy SourceFiles="$(MSBuildProjectDirectory)\Assets\Square150x150Logo.scale-200.png"
          DestinationFiles="$(MSBuildProjectDirectory)\Assets\LargeTile.png"
          SkipUnchangedFiles="true" />
  </Target>

</Project>
