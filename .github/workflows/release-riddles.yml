name: Publish Random Riddles Extension

on:
  push:
    tags:
      - "riddles/v*.*.*"

env:
  project: CmdPalRandomRiddleExtension
  packageName: JessicaEarleyCha.RandomRiddleForCmdPal
  tag_prefix: "riddles/v"

jobs:
  build_sign_release:
    # This job builds the appx packages and signs them using the trusted signing service
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Debug - Check workspace structure
        run: |
          Write-Host "GitHub Workspace: $Env:GITHUB_WORKSPACE"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem -Name
          Write-Host "Looking for launchSettings.json in various locations:"
          
          $paths = @(
            "CmdPalRandomRiddleExtension/CmdPalRandomRiddleExtension/Properties/launchSettings.json",
            "./CmdPalRandomRiddleExtension/CmdPalRandomRiddleExtension/Properties/launchSettings.json"
          )
          
          foreach($path in $paths) {
            if (Test-Path $path) {
              Write-Host "✅ Found at: $path"
            } else {
              Write-Host "❌ Not found at: $path"
            }
          }

      - name: Update Version in manifest
        run: |
          $version = "${{ github.ref_name }}.0" -replace '^${{ env.tag_prefix }}', ''
          
          $xmlFilePath = "CmdPalRandomRiddleExtension/CmdPalRandomRiddleExtension/Package.appxmanifest"
          [xml]$xml = Get-Content $xmlFilePath
          $xml.Package.Identity.Version = $version
          $xml.Save($xmlFilePath)
          Write-Output "Version updated to $version in $xmlFilePath"
              
      - name: Build
        run: |
          dotnet publish CmdPalRandomRiddleExtension/CmdPalRandomRiddleExtension.sln --configuration Release --runtime win-x64 --self-contained true -p:GenerateAppxPackageOnBuild=true -p:Platform=x64 -p:TreatWarningsAsErrors=false
          
      - name: Debug - List generated files
        run: |
          Write-Host "Looking for generated files..."
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Recurse -File -Filter "*.msix" | ForEach-Object {
              Write-Host "Found MSIX: $($_.FullName)"
          }
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Recurse -File -Filter "*.appx" | ForEach-Object {
              Write-Host "Found APPX: $($_.FullName)"
          }
          
      - name: Move msix Packages
        run: |
          # Move the msix packages to one folder for signing
          $msixs = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Recurse -File -Filter "${{ env.project }}*.msix" -exclude "Microsoft.WindowsAppRuntime.*.msix"

          # write the path of each msix (relative to the git root)
          Write-Host "Found the following msix's:"
          foreach($msix in $msixs) {
              Write-Host "*" $msix.Name "`n"
          }

          $DestinationFolder = Join-Path $Env:GITHUB_WORKSPACE "tmp"
          
          if(Test-Path $DestinationFolder) {
              Remove-Item -Path $DestinationFolder -Recurse -Force | Out-Null
          }
          if(-not (Test-Path $DestinationFolder)) {
              New-Item -ItemType Directory -Path $DestinationFolder -Force | Out-Null
          }

          Write-Host "Copying msix's to $DestinationFolder..."

          foreach($msix in $msixs) {
              Copy-Item -Path $msix -Destination $DestinationFolder -Force
          }
      
      - name: Sign files with Trusted Signing
        uses: azure/trusted-signing-action@v0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: baldbeardedbuilder
          certificate-profile-name: baldbeardedbuilder
          files-folder: ${{ github.workspace }}\tmp # This is where the msix files are copied to for signing
          files-folder-filter: msix
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - uses: ncipollo/release-action@v1
        name: Create Release
        with:
          artifacts: "${{ github.workspace }}/tmp/*.msix" # Path to the signed msix files to upload as artifacts for the release. Use glob pattern to match all files in the tmp folder.
          name: ${{ github.ref_name }}
          allowUpdates: true
          tag: ${{ github.ref_name }}
        
  publish:
    runs-on: windows-latest
    needs: build_sign_release
    permissions:
      packages: write
      contents: write
    steps:
      - name: Submit extensions to Winget
        run: |
          $wingetPackage = $Env:packageName
          $gitToken = $Env:GITHUB_TOKEN
          $tagPrefix = "^$Env:tag_prefix"

          $github = Invoke-RestMethod -uri "https://api.github.com/repos/${{ github.repository }}/releases" 
          $targetRelease = $github | Where-Object -Property name -match $tagPrefix | Select -First 1

          $installerX64Url = $targetRelease.assets | Where-Object { $_.name -match 'x64' } | Select-Object -ExpandProperty browser_download_url

          $ver = $targetRelease.tag_name -ireplace $tagPrefix

          # getting latest wingetcreate file
          iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
          .\wingetcreate.exe update $wingetPackage -s -v $ver -u "$installerX64Url|machine" -t $gitToken        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          packageName: ${{ env.packageName }}
          tag_prefix: ${{ env.tag_prefix }}
