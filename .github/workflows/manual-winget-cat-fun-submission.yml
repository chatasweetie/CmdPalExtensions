name: Manual WinGet submission - Cat Fun Extension

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to submit (leave empty to auto-detect from latest release)'
        required: false
        type: string

jobs:
  submit-to-winget:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get latest release
      id: get_release
      shell: pwsh
      run: |
        if ("${{ github.event.inputs.version }}" -ne "") {
          $version = "${{ github.event.inputs.version }}"
          Write-Host "Using provided version: $version"
        } else {
          # Look for the latest CmdPalCatFunExtension release
          $releases = gh release list --repo $env:GITHUB_REPOSITORY --json tagName,name,publishedAt
          $allReleases = $releases | ConvertFrom-Json
          $catFunReleases = $allReleases | Where-Object { $_.tagName -like "*CmdPalCatFunExtension*" } | Sort-Object publishedAt -Descending
          
          if ($catFunReleases.Count -eq 0) {
            throw "No CmdPalCatFunExtension releases found"
          }
          
          $latestCatFunRelease = $catFunReleases[0]
          $version = $latestCatFunRelease.tagName
          Write-Host "Auto-detected latest Cat Fun release: $version"
        }
        
        $assets = gh release view $version --repo $env:GITHUB_REPOSITORY --json assets
        $assetsObj = $assets | ConvertFrom-Json
        $msixAsset = $assetsObj.assets | Where-Object { $_.name -like "*CmdPalCatFunExtension*.msix" } | Select-Object -First 1
        
        if (-not $msixAsset) {
          throw "No CmdPalCatFunExtension MSIX asset found in release $version"
        }
        
        $downloadUrl = $msixAsset.url
        $fileName = $msixAsset.name
        
        # Extract just the version number from the release tag (e.g., "CmdPalCatFunExtension-v0.0.2.0" -> "0.0.2.0")
        $packageVersion = $version -replace '.*-v(\d+\.\d+\.\d+\.\d+)', '$1'
        
        echo "release_tag=$version" >> $env:GITHUB_OUTPUT
        echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT
        echo "download_url=$downloadUrl" >> $env:GITHUB_OUTPUT
        echo "file_name=$fileName" >> $env:GITHUB_OUTPUT
        
        Write-Host "Release tag: $version"
        Write-Host "Package version: $packageVersion"
        Write-Host "Download URL: $downloadUrl"
        Write-Host "File name: $fileName"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create WinGet manifests
      id: create_manifests
      shell: pwsh
      run: |
        $releaseTag = "${{ steps.get_release.outputs.release_tag }}"
        $packageVersion = "${{ steps.get_release.outputs.package_version }}"
        $downloadUrl = "${{ steps.get_release.outputs.download_url }}"
        $fileName = "${{ steps.get_release.outputs.file_name }}"
        
        # Package details for Cat Fun Extension
        $packageIdentifier = "JessicaDeneEarley-Cha.CmdPalCatFunExtension"
        $packageName = "Cat Fun"
        $publisher = "Jessica Dene Earley-Cha"
        $description = "A Command Palette extension that provides bite-sized cat entertainment — fun facts, photos, puns, and short phrases — directly inside the Command Palette."
        $homepage = "https://github.com/chatasweetie/CmdPalExtensions"
        $packageFamilyName = "JessicaDeneEarley-Cha.CmdPalCatFunExtension_27a370594b"
        
        # Download and hash the MSIX file
        Write-Host "Downloading MSIX file to calculate hash..."
        Invoke-WebRequest -Uri $downloadUrl -OutFile $fileName -Headers @{
          "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
          "Accept" = "application/octet-stream"
        }
        
        $hash = (Get-FileHash -Path $fileName -Algorithm SHA256).Hash
        $fileSize = (Get-Item $fileName).Length
        
        Write-Host "File size: $fileSize bytes"
        Write-Host "SHA256 hash: $hash"
        
        # Create manifests directory
        $manifestDir = "winget-manifests"
        $packageDir = "$manifestDir\manifests\j\JessicaDeneEarley-Cha\CmdPalCatFunExtension\$packageVersion"
        New-Item -ItemType Directory -Path $packageDir -Force
        
        # Create version manifest
        $versionContent = @"
PackageIdentifier: $packageIdentifier
PackageVersion: $packageVersion
DefaultLocale: en-US
ManifestType: version
ManifestVersion: 1.6.0
"@
        
        # Create installer manifest
        $installerContent = @"
PackageIdentifier: $packageIdentifier
PackageVersion: $packageVersion
Platform:
- Windows.Desktop
MinimumOSVersion: 10.0.19041.0
Scope: user
InstallModes:
- interactive
- silent
UpgradeBehavior: install
Dependencies:
  PackageDependencies:
  - PackageIdentifier: Microsoft.WindowsAppRuntime.1.7
    MinimumVersion: 7000.456.1632.0
PackageFamilyName: $packageFamilyName
Installers:
- Architecture: x64
  InstallerType: msix
  InstallerUrl: $downloadUrl
  InstallerSha256: $hash
ManifestType: installer
ManifestVersion: 1.6.0
"@
        
        # Create locale manifest
        $localeContent = @"
PackageIdentifier: $packageIdentifier
PackageVersion: $packageVersion
PackageLocale: en-US
Publisher: $publisher
PublisherUrl: $homepage
PublisherSupportUrl: https://github.com/chatasweetie/CmdPalExtensions/issues
Author: $publisher
PackageName: $packageName
PackageUrl: $homepage
License: MIT
LicenseUrl: https://opensource.org/licenses/MIT
Copyright: $publisher
CopyrightUrl: https://github.com/chatasweetie/CmdPalExtensions/blob/main/LICENSE
ShortDescription: $description
Description: |-
  Cat Fun is a Command Palette extension that integrates with the Windows Command Palette to deliver
  bite-sized cat content instantly. Get a fun fact, a pun, or a cute photo — all without leaving your keyboard.
  
  Features:
  • Shows random cat facts
  • Displays cat photos
  • Shows playful cat puns
  • Interactive content delivery through Command Palette
Moniker: cat-fun
Tags:
- windows-commandpalette-extension
- productivity
- utility
- cat
- entertainment
- fun
ManifestType: defaultLocale
ManifestVersion: 1.6.0
"@
        
        # Write manifest files
        $versionContent | Out-File -FilePath "$packageDir\$packageIdentifier.yaml" -Encoding utf8
        $installerContent | Out-File -FilePath "$packageDir\$packageIdentifier.installer.yaml" -Encoding utf8  
        $localeContent | Out-File -FilePath "$packageDir\$packageIdentifier.locale.en-US.yaml" -Encoding utf8
        
        Write-Host "Created manifest files:"
        Get-ChildItem -Path $packageDir -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
        
        echo "package_dir=$packageDir" >> $env:GITHUB_OUTPUT
        echo "manifest_dir=$manifestDir" >> $env:GITHUB_OUTPUT

    - name: Submit to WinGet repository
      shell: pwsh
      run: |
        $packageDir = "${{ steps.create_manifests.outputs.package_dir }}"
        $manifestDir = "${{ steps.create_manifests.outputs.manifest_dir }}"
        
        # Configure git with token authentication
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        Write-Host "Setting up clean winget-pkgs repository..."
        
        # Create a unique branch name to avoid conflicts
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $branchName = "cat-fun-${{ steps.get_release.outputs.package_version }}-$timestamp"
        
        # Clone the official winget-pkgs repository directly (not a fork)
        Write-Host "Cloning microsoft/winget-pkgs repository..."
        git clone "https://github.com/microsoft/winget-pkgs.git" winget-pkgs-clean
        cd winget-pkgs-clean
        
        Write-Host "Creating new branch: $branchName"
        git checkout -b $branchName
        
        Write-Host "Copying ONLY Cat Fun Extension manifest files..."
        $sourcePath = "..\$packageDir"
        $targetPath = $packageDir -replace "winget-manifests\\", ""
        
        # Ensure target directory exists
        New-Item -ItemType Directory -Path $targetPath -Force
        
        # Copy only our specific Cat Fun Extension files
        Copy-Item -Path "$sourcePath\*" -Destination $targetPath -Recurse -Force
        
        Write-Host "Verifying only Cat Fun Extension files are being added..."
        # Check only the files we specifically added (new untracked files)
        $addedFiles = git ls-files --others --exclude-standard
        Write-Host "Files to be committed:"
        $addedFiles | ForEach-Object { Write-Host "  $_" }
        
        # Filter to only manifest files and verify they're Cat Fun Extension files
        $manifestFiles = $addedFiles | Where-Object { $_ -like "manifests/*" }
        $nonCatFunFiles = $manifestFiles | Where-Object { $_ -notmatch "CmdPalCatFunExtension" }
        
        if ($nonCatFunFiles) {
          Write-Error "ERROR: Non-Cat Fun Extension files detected:"
          $nonCatFunFiles | ForEach-Object { Write-Error "  $_" }
          exit 1
        }
        
        if ($manifestFiles.Count -eq 0) {
          Write-Error "ERROR: No Cat Fun Extension manifest files found!"
          exit 1
        }
        
        Write-Host "Validation passed: Found $($manifestFiles.Count) Cat Fun Extension manifest files."
        
        Write-Host "Adding and committing Cat Fun Extension files only..."
        git add manifests/j/JessicaDeneEarley-Cha/CmdPalCatFunExtension/
        
        $commitMessage = "Add JessicaDeneEarley-Cha.CmdPalCatFunExtension version ${{ steps.get_release.outputs.package_version }}"
        git commit -m $commitMessage
        
        Write-Host "Setting up authentication and pushing to personal fork..."
        
        # Check if fork exists, create if it doesn't
        $forkExists = $false
        try {
          gh repo view "${{ github.actor }}/winget-pkgs" 2>$null
          if ($LASTEXITCODE -eq 0) {
            $forkExists = $true
            Write-Host "Fork already exists"
          }
        }
        catch {
          Write-Host "Fork does not exist"
        }
        
        if (-not $forkExists) {
          Write-Host "Creating fork..."
          gh repo fork microsoft/winget-pkgs --clone=false --remote=false
          Start-Sleep -Seconds 3
        }
        
        # Add our fork as a remote and push the branch
        $forkUrl = "https://x-access-token:${{ secrets.WINGET_TOKEN }}@github.com/${{ github.actor }}/winget-pkgs.git"
        git remote add fork $forkUrl
        
        Write-Host "Pushing branch to fork..."
        git push fork $branchName
        
        Write-Host "Creating pull request from clean branch..."
        $prTitle = "New version: JessicaDeneEarley-Cha.CmdPalCatFunExtension version ${{ steps.get_release.outputs.package_version }}"
        $prBody = "This PR adds version ${{ steps.get_release.outputs.package_version }} of Cat Fun Extension to the Windows Package Manager Community Repository.`n`nGenerated by GitHub Actions from https://github.com/chatasweetie/CmdPalExtensions`n`nThis submission contains only Cat Fun Extension manifests to avoid validation conflicts."
        
        $prUrl = gh pr create --repo microsoft/winget-pkgs --title $prTitle --body $prBody --head "${{ github.actor }}:$branchName"
        Write-Host "Pull request created: $prUrl"
        
        echo "pr_url=$prUrl" >> $env:GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.WINGET_TOKEN }}
        
    - name: Cleanup temporary files
      if: always()
      shell: pwsh
      run: |
        Write-Host "Cleaning up temporary files and directories..."
        
        # Remove any downloaded MSIX files
        Get-ChildItem -Path "." -Filter "*.msix" | Remove-Item -Force -ErrorAction SilentlyContinue
        
        # Remove winget-manifests directory
        if (Test-Path "winget-manifests") {
          Remove-Item -Path "winget-manifests" -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        # Remove winget-pkgs-clean directory
        if (Test-Path "winget-pkgs-clean") {
          Remove-Item -Path "winget-pkgs-clean" -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        Write-Host "Cleanup completed."

    - name: Output result
      if: always()
      run: |
        Write-Host "WinGet submission workflow completed for Cat Fun Extension."
        Write-Host "Check the logs above for submission status."