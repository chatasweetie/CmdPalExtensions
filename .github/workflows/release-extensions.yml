name: Release Command Palette Extensions

on:
  push:
    tags:
      - 'riddles/v*.*.*'

env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  determine-project:
    runs-on: ubuntu-latest
    outputs:
      project-name: ${{ steps.determine.outputs.project-name }}
      project-path: ${{ steps.determine.outputs.project-path }}
      package-name: ${{ steps.determine.outputs.package-name }}
      tag-prefix: ${{ steps.determine.outputs.tag-prefix }}
    steps:
      - name: Determine project from tag
        id: determine
        run: |
          tag="${{ github.ref_name }}"
          echo "Processing tag: $tag"
          
          if [[ $tag == riddles/v* ]]; then
            echo "project-name=CmdPalRandomRiddleExtension" >> $GITHUB_OUTPUT
            echo "project-path=CmdPalRandomRiddleExtension" >> $GITHUB_OUTPUT
            echo "package-name=JessicaEarleyCha.RandomRiddleForCmdPal" >> $GITHUB_OUTPUT
            echo "tag-prefix=riddles/v" >> $GITHUB_OUTPUT
          else
            echo "Unknown tag pattern: $tag"
            exit 1
          fi

  build_sign_release:
    needs: determine-project
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      project: ${{ needs.determine-project.outputs.project-name }}
      projectPath: ${{ needs.determine-project.outputs.project-path }}
      packageName: ${{ needs.determine-project.outputs.package-name }}
      tagPrefix: ${{ needs.determine-project.outputs.tag-prefix }}
      
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Update Version in manifest
        working-directory: "./${{ env.projectPath }}/${{ env.project }}"
        run: |
          $version = "${{ github.ref_name }}.0" -replace '^${{ env.tagPrefix }}', ''
          
          $xmlFilePath = "Package.appxmanifest"
          [xml]$xml = Get-Content $xmlFilePath
          $xml.Package.Identity.Version = $version
          $xml.Save($xmlFilePath)
          Write-Output "Version updated to $version in $xmlFilePath"
              
      - name: Build
        run: |
          dotnet build --configuration Release -p:GenerateAppxPackageOnBuild=true -p:Platform=x64
          
          
      - name: Move msix Packages
        run: |
          # Move the msix packages to one folder for signing
          $msixs = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Recurse -File -Filter "${{ env.project }}*.msix" -exclude "Microsoft.WindowsAppRuntime.*.msix"

          # write the path of each msix (relative to the git root)
          Write-Host "Found the following msix's:"
          foreach($msix in $msixs) {
              Write-Host "*" $msix.Name "
"
          }

          $DestinationFolder = Join-Path $Env:GITHUB_WORKSPACE "tmp"
          
          if(Test-Path $DestinationFolder) {
              Remove-Item -Path $DestinationFolder -Recurse -Force | Out-Null
          }
          if(-not (Test-Path $DestinationFolder)) {
              New-Item -ItemType Directory -Path $DestinationFolder -Force | Out-Null
          }

          Write-Host "Copying msix's to $DestinationFolder..."

          foreach($msix in $msixs) {
              Copy-Item -Path $msix -Destination $DestinationFolder -Force
          }
      
      - name: Sign files with Trusted Signing
        uses: azure/trusted-signing-action@v0
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://eus.codesigning.azure.net/
          trusted-signing-account-name: baldbeardedbuilder
          certificate-profile-name: baldbeardedbuilder
          files-folder: ${{ github.workspace }}\tmp
          files-folder-filter: msix
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - uses: ncipollo/release-action@v1
        name: Create Release
        with:
          artifacts: "${{ github.workspace }}/tmp/*.msix"
          name: ${{ github.ref_name }}
          allowUpdates: true
          tag: ${{ github.ref_name }}
        
  publish:
    runs-on: windows-latest
    needs: build_sign_release
    permissions:
      packages: write
      contents: write
    steps:
      - name: Submit extensions to Winget
        env:
          packageName: ${{ needs.determine-project.outputs.package-name }}
          tagPrefix: ${{ needs.determine-project.outputs.tag-prefix }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $wingetPackage = $Env:packageName
          $gitToken = $Env:GITHUB_TOKEN
          $tagPrefix = "^$Env:tagPrefix"

          $github = Invoke-RestMethod -uri "https://api.github.com/repos/${{ github.repository }}/releases" 
          $targetRelease = $github | Where-Object -Property name -match $tagPrefix | Select -First 1

          $installerX64Url = $targetRelease.assets | Where-Object { $_.name -match 'x64' } | Select-Object -ExpandProperty browser_download_url

          $ver = $targetRelease.tag_name -ireplace $tagPrefix

          # getting latest wingetcreate file
          iwr https://aka.ms/wingetcreate/latest -OutFile wingetcreate.exe
          .\wingetcreate.exe update $wingetPackage -s -v $ver -u "$installerX64Url|machine" -t $gitToken
