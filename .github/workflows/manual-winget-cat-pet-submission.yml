name: Manual WinGet submission - Cat Pet Extension

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to process (e.g., v0.0.2)'
        required: true
        default: 'v0.0.2'

jobs:
  winget-cat-pet-manual:
    name: Manually submit Cat Pet Extension to WinGet
    runs-on: windows-latest
    
    steps:
      - name: Get release info and extract Cat Pet Extension details
        id: extract-info
        run: |
          # Get the specified release info
          $releaseTag = '${{ inputs.release_tag }}'
          Write-Host "Fetching release info for tag: $releaseTag"
          
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$releaseTag"
          $assets = $release.assets
          
          # Find the Cat Pet Extension MSIX file
          $catPetAsset = $assets | Where-Object { $_.name -match 'CmdPalCatPetExtension.*\.msix$' }
          
          if ($null -eq $catPetAsset) {
            Write-Error "No Cat Pet Extension MSIX found in release $releaseTag"
            Write-Host "Available assets:"
            $assets | ForEach-Object { Write-Host "  - $($_.name)" }
            exit 1
          }
          
          $msixUrl = $catPetAsset.browser_download_url
          $packageVersion = $releaseTag.Trim('v')
          
          # Extract version from MSIX filename as fallback
          if ([string]::IsNullOrEmpty($packageVersion) -or $packageVersion -eq $releaseTag) {
            if ($catPetAsset.name -match 'CmdPalCatPetExtension_(\d+\.\d+\.\d+\.\d+)') {
              $packageVersion = $matches[1]
            }
          }
          
          Write-Host "Found Cat Pet Extension:"
          Write-Host "  Asset name: $($catPetAsset.name)"
          Write-Host "  Package version: $packageVersion"
          Write-Host "  MSIX URL: $msixUrl"
          
          # Set outputs
          echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT
          echo "msix_url=$msixUrl" >> $env:GITHUB_OUTPUT

      - name: Submit Cat Pet Extension to WinGet
        run: |
          $packageVersion = '${{ steps.extract-info.outputs.package_version }}'
          $msixUrl = '${{ steps.extract-info.outputs.msix_url }}'
          
          Write-Host "Submitting to WinGet:"
          Write-Host "  Package Version: $packageVersion"
          Write-Host "  MSIX URL: $msixUrl"
          
          # Create temporary directory for manifests
          $tempDir = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          $manifestsDir = Join-Path $tempDir "manifests"
          $packageDir = Join-Path $manifestsDir "j" "jessicadeneearley-cha" "cmdpalcatpetextension" $packageVersion
          New-Item -ItemType Directory -Path $packageDir -Force
          
          # Create version manifest
          $versionContent = @"
          PackageIdentifier: JessicaDeneEarley-Cha.CmdPalCatPetExtension
          PackageVersion: $packageVersion
          DefaultLocale: en-US
          ManifestType: version
          ManifestVersion: 1.4.0
          "@
          
          $versionContent | Out-File -FilePath (Join-Path $packageDir "JessicaDeneEarley-Cha.CmdPalCatPetExtension.yaml") -Encoding UTF8
          
          # Create installer manifest
          $installerContent = @"
          PackageIdentifier: JessicaDeneEarley-Cha.CmdPalCatPetExtension
          PackageVersion: $packageVersion
          InstallerLocale: en-US
          Platform:
          - Windows.Desktop
          MinimumOSVersion: 10.0.17763.0
          InstallerType: msix
          Scope: machine
          InstallModes:
          - interactive
          - silent
          UpgradeBehavior: install
          Dependencies:
            PackageDependencies:
            - PackageIdentifier: Microsoft.WindowsAppRuntime.1.6
              MinimumVersion: 6.0.0
          PackageFamilyName: JessicaDeneEarley-Cha.CmdPalCatPetExtension_9zz4h110yvjzm
          Installers:
          - Architecture: x64
            InstallerUrl: $msixUrl
            InstallerSha256: FFD620E3D0601489355CE60454C2994B933687963718D9504CA8282BFF71F199
            SignatureSha256: FFD620E3D0601489355CE60454C2994B933687963718D9504CA8282BFF71F199
          ManifestType: installer
          ManifestVersion: 1.4.0
          "@
          
          $installerContent | Out-File -FilePath (Join-Path $packageDir "JessicaDeneEarley-Cha.CmdPalCatPetExtension.installer.yaml") -Encoding UTF8
          
          # Create locale manifest
          $localeContent = @"
          PackageIdentifier: JessicaDeneEarley-Cha.CmdPalCatPetExtension
          PackageVersion: $packageVersion
          PackageLocale: en-US
          Publisher: Jessica Dene Earley-Cha
          PublisherUrl: https://github.com/chatasweetie
          PublisherSupportUrl: https://github.com/chatasweetie/CmdPalExtensions/issues
          Author: Jessica Dene Earley-Cha
          PackageName: Pet Cat
          PackageUrl: https://github.com/chatasweetie/CmdPalExtensions
          License: MIT
          LicenseUrl: https://opensource.org/licenses/MIT
          Copyright: Jessica Dene Earley-Cha
          CopyrightUrl: https://github.com/chatasweetie/CmdPalExtensions/blob/main/LICENSE
          ShortDescription: Adopt and care for a virtual cat directly from the Command Palette.
          Description: |-
            Pet Cat is a Command Palette extension that lets you adopt and care for a virtual cat right from the Command Palette.
            Feed, groom, and play with your virtual pet while working in your development environment.
          Moniker: pet-cat
          Tags:
          - windows-commandpalette-extension
          - virtual-pet
          - command-palette
          - cat
          - pet
          ManifestType: locale
          ManifestVersion: 1.4.0
          "@
          
          $localeContent | Out-File -FilePath (Join-Path $packageDir "JessicaDeneEarley-Cha.CmdPalCatPetExtension.locale.en-US.yaml") -Encoding UTF8
          
          Write-Host "Created manifest files:"
          Get-ChildItem $packageDir -Recurse
          
          # Fork and clone winget-pkgs repo
          Write-Host "Forking and cloning winget-pkgs..."
          gh repo fork microsoft/winget-pkgs --clone
          cd winget-pkgs
          
          # Copy manifests to the repo
          Write-Host "Copying manifests to winget-pkgs..."
          $destDir = Join-Path "manifests" "j" "jessicadeneearley-cha" "cmdpalcatpetextension" $packageVersion
          Copy-Item -Path $packageDir -Destination (Split-Path $destDir) -Recurse -Force
          
          # Commit and push
          Write-Host "Committing manifests..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "New version: JessicaDeneEarley-Cha.CmdPalCatPetExtension version $packageVersion"
          git push origin main
          
          # Create pull request
          Write-Host "Creating pull request..."
          $prUrl = gh pr create --title "New version: JessicaDeneEarley-Cha.CmdPalCatPetExtension version $packageVersion" --body "This PR adds JessicaDeneEarley-Cha.CmdPalCatPetExtension version $packageVersion to the Windows Package Manager Community Repository.`n`nGenerated by GitHub Actions from https://github.com/chatasweetie/CmdPalExtensions"
          
          Write-Host "Pull request created: $prUrl"
        env:
          WINGET_CREATE_GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}
          GH_TOKEN: ${{ secrets.WINGET_TOKEN }}