name: WinGet submission - Cat Fun Extension

on:
  release:
    types: [published]

jobs:
  winget-cat-fun:
    name: Submit Cat Fun Extension to WinGet
    runs-on: windows-latest
    
    env:
      WINGET_CREATE_GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}
      GH_TOKEN: ${{ secrets.WINGET_TOKEN }}
    
    # Only run for stable releases that are Cat Fun Extension releases
    if: |
      ${{ 
        !github.event.release.prerelease && 
        contains(github.event.release.tag_name, 'CmdPalCatFunExtension')
      }}
    
    steps:
      - name: Extract Cat Fun Extension info from release
        id: extract-info
        run: |
          # Get all assets from the release
          $assets = '${{ toJSON(github.event.release.assets) }}' | ConvertFrom-Json
          
          # Find the Cat Fun Extension MSIX file
          $catFunAsset = $assets | Where-Object -Property name -match 'CmdPalCatFunExtension.*\.msix$'
          
          if ($null -eq $catFunAsset) {
            Write-Error "No Cat Fun Extension MSIX found in release assets"
            Write-Host "Available assets:"
            $assets | ForEach-Object { Write-Host "  - $($_.name)" }
            exit 1
          }
          
          $msixUrl = $catFunAsset.browser_download_url
          $packageVersion = ('${{ github.event.release.tag_name }}').Trim('v')
          
          # Extract version from tag (e.g., "CmdPalCatFunExtension-v0.0.2.0" -> "0.0.2.0")
          if ($packageVersion -eq '${{ github.event.release.tag_name }}' -or [string]::IsNullOrEmpty($packageVersion)) {
            if ('${{ github.event.release.tag_name }}' -match 'CmdPalCatFunExtension-v(\d+\.\d+\.\d+\.\d+)') {
              $packageVersion = $matches[1]
            } elseif ($catFunAsset.name -match 'CmdPalCatFunExtension_(\d+\.\d+\.\d+\.\d+)') {
              $packageVersion = $matches[1]
            } else {
              Write-Error "Could not determine package version from tag or filename"
              exit 1
            }
          }
          
          Write-Host "Found Cat Fun Extension:"
          Write-Host "  Asset name: $($catFunAsset.name)"
          Write-Host "  Package version: $packageVersion"
          Write-Host "  MSIX URL: $msixUrl"
          
          # Set outputs for next step
          echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT
          echo "msix_url=$msixUrl" >> $env:GITHUB_OUTPUT

      - name: Install WinGetCreate
        run: |
          Write-Host "Installing wingetcreate..."
          winget install --id Microsoft.WingetCreate --accept-source-agreements --accept-package-agreements
          
      - name: Submit Cat Fun Extension to WinGet using wingetcreate
        run: |
          $packageVersion = '${{ steps.extract-info.outputs.package_version }}'
          $msixUrl = '${{ steps.extract-info.outputs.msix_url }}'
          
          Write-Host "Submitting to WinGet using wingetcreate:"
          Write-Host "  Package Version: $packageVersion"
          Write-Host "  MSIX URL: $msixUrl"
          
          # Use wingetcreate to generate and submit manifests automatically
          Write-Host "Running wingetcreate new with MSIX URL..."
          
          # Run wingetcreate in non-interactive mode with pre-filled values
          $env:WINGETCREATE_PACKAGEIDENTIFIER = "JessicaDeneEarley-Cha.CmdPalCatFunExtension"
          $env:WINGETCREATE_PACKAGEVERSION = $packageVersion
          $env:WINGETCREATE_DEFAULTLOCALE = "en-US"
          $env:WINGETCREATE_PUBLISHER = "Jessica Dene Earley-Cha"
          $env:WINGETCREATE_PACKAGENAME = "Cat Fun"
          $env:WINGETCREATE_LICENSE = "MIT"
          $env:WINGETCREATE_SHORTDESCRIPTION = "A Command Palette extension that provides bite-sized cat entertainment"
          
          # Create manifests and submit to WinGet
          try {
            wingetcreate new $msixUrl --token $env:WINGET_CREATE_GITHUB_TOKEN --submit --replace
            Write-Host "✓ Successfully submitted to WinGet via wingetcreate"
          }
          catch {
            Write-Host "❌ wingetcreate submission failed, trying manual fallback..."
            Write-Error "WinGetCreate failed: $_"
            exit 1
          }
        
      - name: Cleanup temporary files
        if: always()
        run: |
          Write-Host "Cleaning up temporary files and directories..."
          
          # Remove any downloaded MSIX files
          Get-ChildItem -Path "." -Filter "*.msix" | Remove-Item -Force -ErrorAction SilentlyContinue
          
          # Remove temporary manifests directory
          if (Test-Path "manifests") {
            Remove-Item -Path "manifests" -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          # Remove winget-pkgs-clean directory
          if (Test-Path "winget-pkgs-clean") {
            Remove-Item -Path "winget-pkgs-clean" -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          Write-Host "Cleanup completed."

      - name: Output result
        if: always()
        run: |
          Write-Host "WinGet submission workflow completed."
          Write-Host "Check the logs above for submission status."