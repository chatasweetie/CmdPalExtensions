name: WinGet submission - Cat Fun Extension

on:
  release:
    types: [published]

jobs:
  winget-cat-fun:
    name: Submit Cat Fun Extension to WinGet
    runs-on: windows-latest
    
    env:
      WINGET_CREATE_GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}
      GH_TOKEN: ${{ secrets.WINGET_TOKEN }}
    
    # Only run for stable releases that are Cat Fun Extension releases
    if: |
      ${{ 
        !github.event.release.prerelease && 
        contains(github.event.release.tag_name, 'CmdPalCatFunExtension')
      }}
    
    steps:
      - name: Extract Cat Fun Extension info from release
        id: extract-info
        run: |
          # Get all assets from the release
          $assets = '${{ toJSON(github.event.release.assets) }}' | ConvertFrom-Json
          
          # Find the Cat Fun Extension MSIX file
          $catFunAsset = $assets | Where-Object -Property name -match 'CmdPalCatFunExtension.*\.msix$'
          
          if ($null -eq $catFunAsset) {
            Write-Error "No Cat Fun Extension MSIX found in release assets"
            Write-Host "Available assets:"
            $assets | ForEach-Object { Write-Host "  - $($_.name)" }
            exit 1
          }
          
          $msixUrl = $catFunAsset.browser_download_url
          $packageVersion = ('${{ github.event.release.tag_name }}').Trim('v')
          
          # Extract version from MSIX filename if tag version doesn't work
          if ([string]::IsNullOrEmpty($packageVersion) -or $packageVersion -eq '${{ github.event.release.tag_name }}') {
            if ($catFunAsset.name -match 'CmdPalCatFunExtension_(\d+\.\d+\.\d+\.\d+)') {
              $packageVersion = $matches[1]
            } else {
              Write-Error "Could not determine package version from tag or filename"
              exit 1
            }
          }
          
          Write-Host "Found Cat Fun Extension:"
          Write-Host "  Asset name: $($catFunAsset.name)"
          Write-Host "  Package version: $packageVersion"
          Write-Host "  MSIX URL: $msixUrl"
          
          # Set outputs for next step
          echo "package_version=$packageVersion" >> $env:GITHUB_OUTPUT
          echo "msix_url=$msixUrl" >> $env:GITHUB_OUTPUT

      - name: Submit Cat Fun Extension to WinGet
        run: |
          $packageVersion = '${{ steps.extract-info.outputs.package_version }}'
          $msixUrl = '${{ steps.extract-info.outputs.msix_url }}'
          
          Write-Host "Submitting to WinGet:"
          Write-Host "  Package Version: $packageVersion"
          Write-Host "  MSIX URL: $msixUrl"
          
          # Create temporary directory for manifests
          $tempDir = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          $manifestsDir = Join-Path $tempDir "manifests"
          $packageDir = Join-Path $manifestsDir "j" "jessicadeneearley-cha" "cmdpalcatfunextension" $packageVersion
          New-Item -ItemType Directory -Path $packageDir -Force
          
          # Download and calculate SHA256 hash
          $fileName = "CmdPalCatFunExtension_$packageVersion.msix"
          Write-Host "Downloading MSIX file to calculate hash..."
          Invoke-WebRequest -Uri $msixUrl -OutFile $fileName
          $sha256Hash = (Get-FileHash -Path $fileName -Algorithm SHA256).Hash
          Write-Host "SHA256 hash: $sha256Hash"
          
          # Create version manifest
          $versionContent = @"
          PackageIdentifier: JessicaDeneEarley-Cha.CmdPalCatFunExtension
          PackageVersion: $packageVersion
          DefaultLocale: en-US
          ManifestType: version
          ManifestVersion: 1.4.0
          "@
          
          $versionContent | Out-File -FilePath (Join-Path $packageDir "JessicaDeneEarley-Cha.CmdPalCatFunExtension.yaml") -Encoding UTF8
          
          # Create installer manifest
          $installerContent = @"
          PackageIdentifier: JessicaDeneEarley-Cha.CmdPalCatFunExtension
          PackageVersion: $packageVersion
          InstallerLocale: en-US
          Platform:
          - Windows.Desktop
          MinimumOSVersion: 10.0.17763.0
          InstallerType: msix
          Scope: machine
          InstallModes:
          - interactive
          - silent
          UpgradeBehavior: install
          Dependencies:
            PackageDependencies:
            - PackageIdentifier: Microsoft.WindowsAppRuntime.1.6
              MinimumVersion: 6.0.0
          PackageFamilyName: JessicaDeneEarley-Cha.CmdPalCatFunExtension_9zz4h110yvjzm
          Installers:
          - Architecture: x64
            InstallerUrl: $msixUrl
            InstallerSha256: $sha256Hash
            SignatureSha256: $sha256Hash
          ManifestType: installer
          ManifestVersion: 1.4.0
          "@
          
          $installerContent | Out-File -FilePath (Join-Path $packageDir "JessicaDeneEarley-Cha.CmdPalCatFunExtension.installer.yaml") -Encoding UTF8
          
          # Create locale manifest
          $localeContent = @"
          PackageIdentifier: JessicaDeneEarley-Cha.CmdPalCatFunExtension
          PackageVersion: $packageVersion
          PackageLocale: en-US
          Publisher: Jessica Dene Earley-Cha
          PublisherUrl: https://github.com/chatasweetie
          PublisherSupportUrl: https://github.com/chatasweetie/CmdPalExtensions/issues
          Author: Jessica Dene Earley-Cha
          PackageName: Cat Fun
          PackageUrl: https://github.com/chatasweetie/CmdPalExtensions
          License: MIT
          LicenseUrl: https://opensource.org/licenses/MIT
          Copyright: Jessica Dene Earley-Cha
          CopyrightUrl: https://github.com/chatasweetie/CmdPalExtensions/blob/main/LICENSE
          ShortDescription: A Command Palette extension that provides bite-sized cat entertainment — fun facts, photos, puns, and short phrases — directly inside the Command Palette.
          Description: |-
            Cat Fun is a Command Palette extension that integrates with the Windows Command Palette to deliver
            bite-sized cat content instantly. Get a fun fact, a pun, or a cute photo — all without leaving your keyboard.
            
            Features:
            • Shows random cat facts
            • Displays cat photos  
            • Shows playful cat puns
            • Interactive content delivery through Command Palette
          Moniker: cat-fun
          Tags:
          - windows-commandpalette-extension
          - cat
          - entertainment
          - fun
          - command-palette
          - productivity
          ManifestType: locale
          ManifestVersion: 1.4.0
          "@
          
          $localeContent | Out-File -FilePath (Join-Path $packageDir "JessicaDeneEarley-Cha.CmdPalCatFunExtension.locale.en-US.yaml") -Encoding UTF8
          
          Write-Host "Created manifest files:"
          Get-ChildItem $packageDir -Recurse
          
          if ($packageVersion -match '^0\.0\.') {
            Write-Host "Creating new package (version starts with 0.0.x)..."
            
            # Ensure clean fork and clone winget-pkgs repo
            Write-Host "Ensuring clean fork of microsoft/winget-pkgs repository..."
            
            # Delete existing fork if it exists to ensure clean state
            try {
              Write-Host "Checking if fork exists..."
              gh repo view "chatasweetie/winget-pkgs" 2>$null
              if ($LASTEXITCODE -eq 0) {
                Write-Host "Deleting existing fork to ensure clean state..."
                gh repo delete "chatasweetie/winget-pkgs" --yes
                Start-Sleep -Seconds 5
              }
            }
            catch {
              Write-Host "No existing fork found or already deleted."
            }
            
            Write-Host "Creating fresh fork and cloning..."
            gh repo fork microsoft/winget-pkgs --clone
            cd winget-pkgs
            
            # Ensure we're on the latest master branch
            git checkout master
            git pull origin master
            
            # Copy manifests to the repo
            Write-Host "Copying manifests to winget-pkgs..."
            $destDir = Join-Path "manifests" "j" "jessicadeneearley-cha" "cmdpalcatfunextension" $packageVersion
            New-Item -ItemType Directory -Path $destDir -Force
            Copy-Item -Path "$packageDir\*" -Destination $destDir -Recurse -Force
            
            # Commit and push
            Write-Host "Committing manifests..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "New package: JessicaDeneEarley-Cha.CmdPalCatFunExtension version $packageVersion"
            
            # Set up authentication and push
            git remote set-url origin "https://x-access-token:$env:GH_TOKEN@github.com/chatasweetie/winget-pkgs.git"
            git push origin master
            
            # Create pull request
            Write-Host "Creating pull request..."
            $prUrl = gh pr create --title "New package: JessicaDeneEarley-Cha.CmdPalCatFunExtension version $packageVersion" --body "This PR adds JessicaDeneEarley-Cha.CmdPalCatFunExtension version $packageVersion to the Windows Package Manager Community Repository.`n`nGenerated by GitHub Actions from https://github.com/chatasweetie/CmdPalExtensions"
            
            Write-Host "Pull request created: $prUrl"
          } else {
            Write-Host "Updating existing package..."
            Write-Host "Note: Automatic updates not yet implemented - use manual workflow for updates"
          }
        
      - name: Output result
        if: always()
        run: |
          Write-Host "WinGet submission workflow completed."
          Write-Host "Check the logs above for submission status."